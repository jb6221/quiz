{"version":3,"sources":["logo.svg","components/GetFeedback.js","components/GetSubmitField.js","components/GetAnswer.js","components/GetQuestion.js","components/QuestionTooHighTooLow.js","components/QuestionBasic.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetFeedback","feedback","isCorrect","contents","concat","className","GetSubmitField","inputFieldContents","submitCallback","changeCallback","onSubmit","autoFocus","type","value","onChange","GetAnswer","answer","GetQuestion","question","QuestionTooHighTooLow","props","state","answers","evaluations","complete","currentUserInput","handleSubmit","bind","handleChange","event","this","setState","target","updatedAnswers","checkCorrect","updatedEvaluations","setComplete","preventDefault","userInput","answerLength","length","maxAttempts","isLastAnswerCorrect","callback","i","push","correctFeedback","tooHighFeedback","tooLowFeedback","incorrectFeedback","getAnswerHistory","Component","QuestionBasic","updatedCorrects","console","log","tryAgainFeedback","App","getQuestionData","fetch","then","r","text","questionData","parseTSV","questionsLoaded","rows","split","questionObj","headers","data","obj","j","trim","JSON","stringify","setCurrentQuestion","currentQuestion","questionCount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.509a3b49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction GetFeedback(feedback, isCorrect) {\r\n    let contents = [];\r\n\r\n    if (isCorrect) {\r\n        contents = contents.concat(\r\n            <div className=\"Feedback Correct\">\r\n                {feedback}\r\n            </div>\r\n        )\r\n    } else {\r\n        contents = contents.concat(\r\n            <div className=\"Feedback Incorrect\">\r\n                {feedback}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return contents;\r\n}\r\n\r\nexport default GetFeedback;","import React from 'react'\r\n\r\nfunction GetSubmitField(inputFieldContents, submitCallback, changeCallback) {\r\n    let contents = [];\r\n\r\n    contents = contents.concat(\r\n        <form onSubmit={submitCallback}>\r\n            <label className=\"Submit\">\r\n                <span className=\"Label\">Your answer:     </span>\r\n                    <input autoFocus type=\"text\" value={inputFieldContents} onChange={changeCallback} />\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n    )\r\n    \r\n    return contents;\r\n}\r\n\r\nexport default GetSubmitField;","import React from 'react';\r\n\r\nfunction GetAnswer(answer) {\r\n    return (\r\n        <div className=\"Answer\">\r\n            {answer}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GetAnswer;","import React from 'react';\r\n\r\nfunction GetQuestion(question) {\r\n    return (\r\n        <div className=\"Question\">\r\n            {question}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GetQuestion;","import React, { Component } from 'react';\r\nimport GetFeedback from './GetFeedback';\r\nimport GetSubmitField from './GetSubmitField';\r\nimport GetAnswer from './GetAnswer';\r\nimport GetQuestion from './GetQuestion';\r\n\r\nclass QuestionTooHighTooLow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state =\r\n        {\r\n            answers: [],\r\n            evaluations: [],\r\n            complete: false,\r\n            currentUserInput: \"\"\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ currentUserInput: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let updatedAnswers = this.state.answers.concat(this.state.currentUserInput);\r\n        let isCorrect = this.checkCorrect(this.state.currentUserInput);\r\n        let updatedEvaluations = this.state.evaluations.concat(isCorrect);\r\n\r\n        this.setState({ answers: updatedAnswers, evaluations: updatedEvaluations }, this.setComplete);\r\n        event.preventDefault();\r\n    }\r\n\r\n    checkCorrect(userInput) {\r\n        let output = (userInput == this.props.question.answer);\r\n        return output;\r\n    }\r\n\r\n    setComplete() {\r\n        let answerLength = this.state.answers.length;\r\n        let maxAttempts = this.props.question.maxAttempts;\r\n        let isLastAnswerCorrect = this.state.evaluations[this.state.evaluations.length - 1];\r\n        //if we have made all attempts or the most recent answer is correct, set complete.\r\n        if (answerLength >= maxAttempts || isLastAnswerCorrect) {\r\n            this.props.callback();\r\n            this.setState({ complete: true });\r\n        }\r\n    }\r\n\r\n    getAnswerHistory() {\r\n        let contents = [];\r\n        //Display the users answer and feedback if necessary.\r\n        for (var i = 0; i < this.state.answers.length; i++) {\r\n            //Write the answer\r\n            contents.push(GetAnswer(this.state.answers[i]));\r\n\r\n            let feedback = \"\";\r\n            //if the answer is correct.\r\n            if (this.state.evaluations[i]) {\r\n                feedback = this.props.question.correctFeedback;\r\n            }\r\n            // if this isn't their final attempt, and they were incorrect feedback should prompt to try again.\r\n            else if (i < this.props.question.maxAttempts - 1) {\r\n                //Too High\r\n                if (this.state.answers[i] > this.props.question.answer) {\r\n                    feedback = this.props.question.tooHighFeedback;\r\n                }\r\n                //Too Low\r\n                else if (this.state.answers[i] < this.props.question.answer) {\r\n                    feedback = this.props.question.tooLowFeedback;\r\n                }\r\n            } else { //Otherwise give the final feedback\r\n                feedback = this.props.question.incorrectFeedback;\r\n            }\r\n\r\n            contents = contents.concat(GetFeedback(feedback, this.state.evaluations[i]));\r\n        }\r\n\r\n        return contents;\r\n    }\r\n\r\n    render() {\r\n        let contents = [];\r\n        //Display Question\r\n        contents.push(GetQuestion(this.props.question.question));\r\n        //Cycle through each answer and give feedback.\r\n        contents = contents.concat(this.getAnswerHistory());\r\n        //if it's not complete dispay the submit field\r\n        if (!this.state.complete) {\r\n            contents = contents.concat(GetSubmitField(this.state.value, this.handleSubmit, this.handleChange));\r\n        }\r\n\r\n        return (\r\n            <div className=\"QuestionContainer\">\r\n                {contents}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default QuestionTooHighTooLow;","import React, { Component } from 'react';\r\nimport GetFeedback from './GetFeedback';\r\nimport GetSubmitField from './GetSubmitField';\r\nimport GetAnswer from './GetAnswer';\r\nimport GetQuestion from './GetQuestion';\r\n\r\nclass QuestionBasic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state =\r\n        {\r\n            answers: [],\r\n            evaluations: [],\r\n            complete: false,\r\n            currentUserInput: \"\"\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ currentUserInput: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let updatedAnswers = this.state.answers.concat(this.state.currentUserInput);\r\n        let updatedCorrects = this.state.evaluations.concat(this.checkCorrect(this.state.currentUserInput));\r\n\r\n\r\n        this.setState({ answers: updatedAnswers, evaluations: updatedCorrects }, this.setComplete);\r\n        event.preventDefault();\r\n    }\r\n\r\n    checkCorrect(userInput) {\r\n        let output = (userInput == this.props.question.answer);\r\n        return output;\r\n    }\r\n\r\n    setComplete() {\r\n        let answerLength = this.state.answers.length;\r\n        let maxAttempts = this.props.question.maxAttempts;\r\n        let isLastAnswerCorrect = this.state.evaluations[this.state.evaluations.length - 1];\r\n        if (answerLength >= maxAttempts || isLastAnswerCorrect) {\r\n            this.props.callback();\r\n            console.log(\"complete\");\r\n            this.setState({ complete: true });\r\n        }\r\n    }\r\n\r\n    getAnswerHistory() {\r\n        let contents = [];\r\n        //Display the users answer and feedback if necessary.\r\n        for (var i = 0; i < this.state.answers.length; i++) {\r\n            //Write the answer\r\n            contents.push(GetAnswer(this.state.answers[i]));\r\n\r\n            let feedback = \"\";\r\n            //Handle Correct feedback\r\n            if (this.state.evaluations[i]) {\r\n                feedback = this.props.question.correctFeedback;\r\n            }\r\n            // if this isn't their final attempt, and they were incorrect feedback should prompt to try again.\r\n            else if (i < this.props.question.maxAttempts - 1) {\r\n                feedback = this.props.question.tryAgainFeedback;\r\n            }\r\n            else { //otherwise give final feedback.\r\n                feedback = this.props.question.incorrectFeedback;\r\n            }\r\n\r\n            contents = contents.concat(GetFeedback(feedback, this.state.evaluations[i]));\r\n        }\r\n\r\n        return contents;\r\n    }\r\n\r\n    render() {\r\n        let contents = [];\r\n        //Display Quesiton\r\n        contents.push(GetQuestion(this.props.question.question));\r\n        //Cycle through each answer and give feedback.\r\n        contents = contents.concat(this.getAnswerHistory());\r\n        //if it's not complete dispay the submit field\r\n        if (!this.state.complete) {\r\n            contents = contents.concat(GetSubmitField(this.state.value, this.handleSubmit, this.handleChange));\r\n        }\r\n\r\n        return (\r\n            <div className=\"QuestionContainer\">\r\n                {contents}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default QuestionBasic;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport QuestionTooHighTooLow from './components/QuestionTooHighTooLow';\nimport QuestionBasic from './components/QuestionBasic';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state =\n    {\n      currentQuestion: 0,\n      questionCount: 0,\n      questionsLoaded: false,\n      questionData: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestionData();\n  }\n\n\n  getQuestionData = () => {\n    fetch('questionSet.txt')\n      .then((r) => r.text())\n      .then(text => {\n        let questionData = this.parseTSV(text);\n        this.setState({ questionData: questionData, questionsLoaded: true })\n      })\n  }\n\n\n  parseTSV = (text)=> {\n    let rows = text.split('\\n');\n\n    let questionObj = [];\n    let headers = rows[0].split('\\t');\n    for (let i = 1; i < rows.length; i++) {\n      let data = rows[i].split('\\t');\n      let obj = {};\n      for (let j = 0; j < data.length; j++) {\n        obj[headers[j].trim()] = data[j].trim();\n      }\n      questionObj.push(obj);\n    }\n    JSON.stringify(questionObj);\n    console.log(questionObj);\n    return questionObj;\n  }\n\n  setCurrentQuestion = ()=> {\n    this.setState({ currentQuestion: this.state.currentQuestion + 1 });\n  }\n\n  render() {\n    let contents = [];\n\n    if (this.state.questionsLoaded) {\n      for (let i = 0; i < this.state.questionData.length && i <= this.state.currentQuestion; i++) {\n        if (this.state.questionData[i].type == \"HighLow\") {\n          contents.push(<QuestionTooHighTooLow question={this.state.questionData[i]} callback={this.setCurrentQuestion} />);\n        }\n        else if (this.state.questionData[i].type == \"Basic\") {\n          contents.push(<QuestionBasic question={this.state.questionData[i]} callback={this.setCurrentQuestion} />);\n        }\n      }\n    }\n\n    return (\n\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>React Quiz</h2>\n        </div>\n        <div>\n          {contents}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}