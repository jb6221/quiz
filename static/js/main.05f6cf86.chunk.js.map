{"version":3,"sources":["logo.svg","components/QuestionTooHighTooLow.js","components/QuestionBasic.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuestionTooHighTooLow","props","state","attemptAnswers","attemptCorrects","complete","currentUserInput","handleSubmit","bind","handleChange","contents","i","this","length","push","className","question","maxAttempts","answer","concat","tooHighFeedback","tooLowFeedback","numberOfAnswers","correctFeedback","incorrectFeedback","onSubmit","type","value","onChange","event","setState","target","updatedAnswers","updatedCorrects","checkCorrect","setComplete","preventDefault","userInput","output","console","log","answerLength","isLastAnswerCorrect","callback","GetFeedback","GetFinalFeedback","style","height","Component","QuestionBasic","tryAgainFeedback","App","getQuestionData","fetch","then","r","text","questionData","parseTSV","questionsLoaded","rows","split","questionObj","headers","data","obj","j","trim","JSON","stringify","setCurrentQuestion","currentQuestion","questionCount","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05f6cf86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass QuestionTooHighTooLow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state =\r\n        {\r\n            attemptAnswers: [],\r\n            attemptCorrects: [],\r\n            complete: false,\r\n            currentUserInput: \"\"\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    GetFeedback() {\r\n        let contents = [];\r\n        //Display the users answer and feedback if necessary.\r\n        for (var i = 0; i < this.state.attemptAnswers.length; i++) {\r\n            //Write the answer\r\n            contents.push(\r\n                <div className=\"\">\r\n                    {this.state.attemptAnswers[i]}\r\n                </div>\r\n            )\r\n\r\n            //break out if they aren't being prompted to try again.\r\n            if (i >= this.props.question.maxAttempts - 1) break;\r\n\r\n            //If its too high give feedback.\r\n            if (this.state.attemptAnswers[i] > this.props.question.answer) {\r\n                contents = contents.concat(\r\n                    <div className=\"\">\r\n                        {this.props.question.tooHighFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n            //If its too low, give feedback.\r\n            else if (this.state.attemptAnswers[i] < this.props.question.answer) {\r\n                contents = contents.concat(\r\n                    <div className=\"question1\">\r\n                        {this.props.question.tooLowFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        return contents;\r\n    }\r\n\r\n    GetFinalFeedback() {\r\n        let contents = [];\r\n        // If it's complete provide final feedback.\r\n        let numberOfAnswers = this.state.attemptAnswers.length;\r\n\r\n        if (this.state.complete) {\r\n            if (!this.state.attemptCorrects[numberOfAnswers - 1]) {\r\n                contents = contents.concat(\r\n                    <div className=\"\">\r\n                        {this.props.question.incorrectFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                contents = contents.concat(\r\n                    <div className=\"question1\">\r\n                        {this.props.question.correctFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            contents = contents.concat(\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Your answer:\r\n                        <input type=\"text\" value={this.state.currentUserInput} onChange={this.handleChange} />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            )\r\n        }\r\n\r\n        return contents;\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ currentUserInput: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let updatedAnswers = this.state.attemptAnswers.concat(this.state.currentUserInput);\r\n        let updatedCorrects = this.state.attemptCorrects.concat(this.checkCorrect(this.state.currentUserInput));\r\n\r\n\r\n        this.setState({ attemptAnswers: updatedAnswers, attemptCorrects: updatedCorrects }, this.setComplete);\r\n        event.preventDefault();\r\n    }\r\n\r\n    checkCorrect(userInput) {\r\n        let output = (userInput == this.props.question.answer);\r\n        console.log((output)?\"The answer is correct!\":\"The answer is wrong.\");\r\n        return output;\r\n    }\r\n\r\n    setComplete() {\r\n        let answerLength = this.state.attemptAnswers.length;\r\n        let maxAttempts = this.props.question.maxAttempts;\r\n        let isLastAnswerCorrect = this.state.attemptCorrects[this.state.attemptCorrects.length-1];\r\n        if (answerLength >= maxAttempts || isLastAnswerCorrect) {\r\n            this.props.callback();\r\n            console.log(\"complete\");\r\n            this.setState({ complete: true });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let contents = [];\r\n        contents.push(\r\n            <div className=\"\">\r\n                {this.props.question.question}\r\n            </div>\r\n        )\r\n\r\n        contents = contents.concat(this.GetFeedback());\r\n        contents = contents.concat(this.GetFinalFeedback());\r\n\r\n\r\n        return (\r\n            <div>\r\n                {contents}\r\n                <div style={{ height: 60 }}> </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default QuestionTooHighTooLow;","import React, { Component } from 'react';\r\n\r\nclass QuestionBasic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state =\r\n        {\r\n            attemptAnswers: [],\r\n            attemptCorrects: [],\r\n            complete: false,\r\n            currentUserInput: \"\"\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    GetFeedback() {\r\n        let contents = [];\r\n        //Display the users answer and feedback if necessary.\r\n        for (var i = 0; i < this.state.attemptAnswers.length; i++) {\r\n            //Write the answer\r\n            contents.push(\r\n                <div className=\"\">\r\n                    {this.state.attemptAnswers[i]}\r\n                </div>\r\n            )\r\n\r\n            //break out if they aren't being prompted to try again.\r\n            if (i >= this.props.question.maxAttempts - 1) break;\r\n\r\n            //If its too high give feedback.\r\n            if (this.state.attemptAnswers[i] != this.props.question.answer) {\r\n                contents = contents.concat(\r\n                    <div className=\"\">\r\n                        {this.props.question.tryAgainFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        return contents;\r\n    }\r\n\r\n    GetFinalFeedback() {\r\n        let contents = [];\r\n        // If it's complete provide final feedback.\r\n        let numberOfAnswers = this.state.attemptAnswers.length;\r\n\r\n        if (this.state.complete) {\r\n            if (!this.state.attemptCorrects[numberOfAnswers - 1]) {\r\n                contents = contents.concat(\r\n                    <div className=\"\">\r\n                        {this.props.question.incorrectFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                contents = contents.concat(\r\n                    <div className=\"question1\">\r\n                        {this.props.question.correctFeedback}\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            contents = contents.concat(\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Your answer:\r\n                        <input type=\"text\" value={this.state.currentUserInput} onChange={this.handleChange} />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            )\r\n        }\r\n\r\n        return contents;\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ currentUserInput: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let updatedAnswers = this.state.attemptAnswers.concat(this.state.currentUserInput);\r\n        let updatedCorrects = this.state.attemptCorrects.concat(this.checkCorrect(this.state.currentUserInput));\r\n\r\n\r\n        this.setState({ attemptAnswers: updatedAnswers, attemptCorrects: updatedCorrects }, this.setComplete);\r\n        event.preventDefault();\r\n    }\r\n\r\n    checkCorrect(userInput) {\r\n        let output = (userInput == this.props.question.answer);\r\n        console.log((output)?\"The answer is correct!\":\"The answer is wrong.\");\r\n        return output;\r\n    }\r\n\r\n    setComplete() {\r\n        let answerLength = this.state.attemptAnswers.length;\r\n        let maxAttempts = this.props.question.maxAttempts;\r\n        let isLastAnswerCorrect = this.state.attemptCorrects[this.state.attemptCorrects.length-1];\r\n        if (answerLength >= maxAttempts || isLastAnswerCorrect) {\r\n            this.props.callback();\r\n            console.log(\"complete\");\r\n            this.setState({ complete: true });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let contents = [];\r\n        contents.push(\r\n            <div className=\"\">\r\n                {this.props.question.question}\r\n            </div>\r\n        )\r\n\r\n        contents = contents.concat(this.GetFeedback());\r\n        contents = contents.concat(this.GetFinalFeedback());\r\n\r\n\r\n        return (\r\n            <div>\r\n                {contents}\r\n                <div style={{ height: 60 }}> </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default QuestionBasic;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport QuestionTooHighTooLow from './components/QuestionTooHighTooLow';\nimport QuestionBasic from './components/QuestionBasic';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state =\n    {\n      currentQuestion: 0,\n      questionCount: 0,\n      questionsLoaded: false,\n      questionData: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestionData();\n  }\n\n\n  getQuestionData = () => {\n    fetch('questionSet.txt')\n      .then((r) => r.text())\n      .then(text => {\n        let questionData = this.parseTSV(text);\n        this.setState({ questionData: questionData, questionsLoaded: true })\n      })\n  }\n\n\n  parseTSV = (text)=> {\n    let rows = text.split('\\n');\n\n    let questionObj = [];\n    let headers = rows[0].split('\\t');\n    for (let i = 1; i < rows.length; i++) {\n      let data = rows[i].split('\\t');\n      let obj = {};\n      for (let j = 0; j < data.length; j++) {\n        obj[headers[j].trim()] = data[j].trim();\n      }\n      questionObj.push(obj);\n    }\n    JSON.stringify(questionObj);\n    console.log(questionObj);\n    return questionObj;\n  }\n\n  setCurrentQuestion = ()=> {\n    this.setState({ currentQuestion: this.state.currentQuestion + 1 });\n  }\n\n  render() {\n    let contents = [];\n\n    if (this.state.questionsLoaded) {\n      for (let i = 0; i < this.state.questionData.length && i <= this.state.currentQuestion; i++) {\n        if (this.state.questionData[i].type == \"HighLow\") {\n          contents.push(<QuestionTooHighTooLow question={this.state.questionData[i]} callback={this.setCurrentQuestion} />);\n        }\n        else if (this.state.questionData[i].type == \"Basic\") {\n          contents.push(<QuestionBasic question={this.state.questionData[i]} callback={this.setCurrentQuestion} />);\n        }\n      }\n    }\n\n    return (\n\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React Quiz</h2>\n        </div>\n        <div>\n          {contents}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}